public class Answer09 {
    public static void main(String[] args) {
    /*
    - 문제9. 1 ~ 100까지의 숫자를 순회한다.
            2 ~ 10 사이의 랜덤한 숫자를 선택하고 이 숫자의 배수를 출력한다.
            다음 루프에서 다시 랜덤 숫자를 선택하고 해당 숫자의 배수를 출력한다.
            그 다음 루프에서 다시 작업을 반복한다.
            끝까지 순회 했을때 출력된 숫자들의 합은 얼마인가 ?

    - 구현 전략
    1~100까지의 숫자를 순회하며, 다음 숫자들 중 선택된 난수의 배수값 중 최소값으로 이동하고 이 값을 출력한다.
    최종적으로 출력된 값들의 합을 출력시킨다.

    1부터 100까지 값이 증가하며, 이를 위해 위해 for문을 사용한다.
    매 루프마다 2~10 사이의 난수 발생작업과 / 현재값이 선택된 난수의 배수인지 판별하는 작업이 필요하다.
    난수 발생 후 현재 증가된 값이 선택된 난수의 배수가 아니라면,
    다음에 수행되는 루프들에서 난수를 다시 뽑지 않고, 이전에 선택된 난수의 배수가 나올 때까지 값을 증가시킨다.
    선택된 난수의 배수가 나오면 해당 숫자를 출력하고 다음 루프로 넘어가 난수를 다시 발생시킨다.

    출력된 값들의 합을 저장하기 위한 변수 sum이 필요하다.

    크게 2가지 조건이 필요하다.
    1. 난수발생조건
    난수 발생은 한 번 실행되고 난 뒤, 증가되는 값에서 해당 난수의 배수를 찾기 전까지 다시 실행되면 안 된다.
    매 루프마다 난수발생 구문을 제어하기 위해 true나 false 값을 갖는 논리형 변수가 필요하다.

    2. 현재값이 선택된 난수의 배수에 해당하는지 판별하는 조건
    나머지를 구하는 연산자(%)를 이용-> 현재값 % 선택된 난수 == 0 에 부합하면 선택된 난수의 배수.

    for문의 매 루프에서 수행될 동작 : 난수 발생과 / 현재값이 선택된 난수의 배수에 해당하는지 판별하는 작업이다.

    - 난수 발생 구문은 앞에 선언한 논리형 변수를 통해 편리하게 제어할 수 있는 if나 while을 사용해 구성한다.
      그리고 2~10 사이의 난수를 발생시키기 위해  -> (int)(Math.random() * (10-2 +1) + 2))

    - 현재값이 선택된 난수의 배수에 해당하는지 판별하는 구문은  if( 현재값 % 선택된 난수 == 0 )
      조건에 부합할 때 수행할 동작 :  선택된 난수의 배수값인 현재값을 출력시키고, sum에 현재값을 더한다.

    난수를 발생시키는 while문이 먼저 수행될지 / 현재값이 선택된 난수의 배수에 해당하는지 판별하는 if문이 먼저 수행될지는
    난수가 발생했을 때와 현재값이 선택된 난수의 배수에 해당할 때 논리형 변수의 값을 바꿈으로써 결정할 수 있다.

    반복이 종료되면 printf를 이용해 출력된 값들의 합인 sum의 값을 보여준다.

    */
        final int START = 1;
        final int END = 100;
        final int REMAIN = 0;

        final int MAX = 10;
        final int MIN = 2;
        int range = MAX - MIN + 1;
        /*  1 ~ 100까지의 숫자를 순회한다.
            2 ~ 10 사이의 랜덤한 숫자를 선택하고 이 숫자의 배수를 출력한다.
            다음 루프에서 다시 랜덤 숫자를 선택하고 해당 숫자의 배수를 출력한다. */

        // 구현 전략이 필요함
        // 1. 1 ~ 100까지 숫자 순회는 for문을 사용
        // 2. for 문 내부에서 랜덤 난수 생성 2 ~ 10
        // 3. 난수의 배수를 검사하기 전까지 랜덤을 다시 생성하면 안됨

        // 실제 난수의 할당(생성) 했는지 안했는지 판정 여부
        boolean isRandomAllocCheck = false;
        int decision = 0;
        int sum = 0;

        for (int i = START; i <= END; i++) {
            if (!isRandomAllocCheck) {
                decision = (int) (Math.random() * range + MIN);
                isRandomAllocCheck = true;
            }

            if (i % decision == REMAIN) {
                System.out.printf("%d의 배수 i = %d\n", decision, i);
                isRandomAllocCheck = false;

                sum += i;
            }
        }

        System.out.println("현재까지 나타난 숫자들의 합 = " + sum);
    }
}