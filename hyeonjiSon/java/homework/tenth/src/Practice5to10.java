public class Practice5to10 {
    public static void main(String[] args) {
        //문제5. 학생 클래스를 만들어봅시다.
        // 1_1.Student2 라는 클래스를 만든다.
        // 1_2. Practice5to10에서 Student 클래스를 사용할 수 있도록 객체화 한다.

        Student student = new Student();
        //School 객체 내부에 있는 initStudent()메서드를 실행하세요.

        student.initStudent();
//  이 initStudent() 메서드를 실행시키면 무엇이 되도록 만들 것인가.
    }
}

//문제 6. 학생 클래스에 수학, 영어, 국어 점수를 입력받도록 개조합니다.
//6_1. 우선 점수를 출력할 수 있는 Score 메서드를 만들어준다.
//6_2. 이때 점수의 범위는 60~100 사이가 나올 수 있도록 한다.

//문제 7. 학생(Student) 클래스의 평균을 계산해봅시다.
//7_1. 학생 30명(한 반)의 배열을 만든다. 요새는 한 반에 30명 안되겠지만 아무튼.
//7_2. 문자(수학, 영어, 국어)라고 입력하면 배열[0~29] = 점수 를 출력해주는 클래스로 만든다.

// 8.평균을 구할 수 있는 메서드를 만들어보자.
//8_1. 성적(Grade)이라는 이름의 데이터 타입(클래스)를 만든다.
//8_2. Student 데이터타입의 배열을 객체화시켜 배열 값의 평균을 구하도록 한다.

//↓ 같은 클래스 내에서 평균 매서드를 호출하여 분산과 표준 편차를 구할 수 있도록 한다.

//문제 9. 7번 문제에서 분산을 구해봅시다.
// 분산을 구할 수 있는 메서드를 만들어보자.
//문제 10. 7번 문제에서 표준 편차를 구해봅시다.
// 표준편차를 구할 수 있는 메서드를 만들어보자.

//11. 마지막으로 Practice5to10에서 클래스들을 객체화하여 실행시킨다.
//11_1. 학생 클래스의 Scanner가 가장 먼저 나오도록 한다.
//11_2. Scanner에 수학/영어/국어 중 한가지 과목을 선택하여 입력하면 30명의 점수가 배열되도록 한다.
                    //Scanner를 우선 빼고 완성했다!
//11_3. 또한 점수의 평균, 표준편차, 분산까지도 출력되도록 한다.
//11_4. 현재의 클래스에서 성적(Grade)를 객체화 시키고 initGrade를 실행시켰을 때
      //위의 계획이 잘 실행되는지 확인한다.